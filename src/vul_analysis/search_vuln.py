import sys
import json
import subprocess as sp
from collections import Counter


def unique_cves(vulns):
	vuln_set = set()
	for vuln in vulns:
		vuln_set.add((vuln[0], vuln[1], vuln[3]))
	return len(vuln_set)


def read_grype(file):
	""" Parses the JSON report generated by Grype scanner and returns a dictionary where
	Args:
		file (JSON): the scanning report
	Returns:
		resdict (dict):
			keys:
				total: the total number of CVEs.
				severities: a counter of the different severity levels,  
				type: type of the vulnerable package and can be either an OS package or a Python package
				vulnerabilities: a list of tuples in the form (pkgName, pkgVersion, severity, cveID, type)
	"""
	with open(file) as f:
		data = json.loads(f.read())
		matches = []

		for match in data['matches']:
			match['artifact']['type'] = match['artifact']['type'].replace('deb', 'ubuntu')
			matches.append((match['artifact']['name'], 
						match['artifact']['version'],  
						match['vulnerability']['severity'], 
						match['vulnerability']['id'], 
						match['artifact']['type']))
		
		resdict = {'total': unique_cves(matches),
				   'severities': Counter(severity[2] for severity in matches),
				   'type': Counter(typ[4] for typ in matches),
				   'vulnerabilities': matches}
		return resdict


def read_trivy(file):
	""" Parses the JSON report generated by Trivy scanner and returns a dictionary where
	Args:
		file (JSON): the scanning report
	Returns:
		resdict (dict):
			keys:
				total: the total number of CVEs.
				severities: a counter of the different severity levels,  
				type: type of the vulnerable package and can be either an OS package or a Python package
				vulnerabilities: a list of tuples in the form (pkgName, pkgVersion, severity, cveID, type)
	"""
	with open(file) as f:
		data = json.loads(f.read())

		vuls = []
		for res in data['Results']:
			res['Type'] = res['Type'].replace('python-pkg', 'python')
			for vul in res['Vulnerabilities']:
				vuls.append((vul['PkgName'], 
							vul['InstalledVersion'],  
							vul['Severity'], 
							vul['VulnerabilityID'], 
							res['Type']))

		resdict = {'total': unique_cves(vuls),  
				   'severities': Counter(severity[2] for severity in vuls),
				   'type': Counter(typ[4] for typ in vuls),
				   'vulnerabilities': vuls}
		return resdict


def read_clair(file):
	""" Parses the JSON report generated by Clair scanner and returns a dictionary where
	Args:
		file (JSON): the scanning report
	Returns:
		resdict (dict):
			keys:
				total: the total number of CVEs.
				severities: a counter of the different severity levels,  
				type: type of the vulnerable package and can be either an OS package or a Python package
				vulnerabilities: a list of tuples in the form (pkgName, pkgVersion, severity, cveID, type)
	"""
	with open(file) as f:
		data = json.loads(f.read())
		pkgs = data['packages']
		vulns = data['vulnerabilities']
		pkg_vulns = data['package_vulnerabilities']
		all_vuln = {}
		for k, vuln in vulns.items():
			all_vuln[k] = {'cve': vuln['name'].split()[0], 
						   'severity': vuln['normalized_severity'],
						   'pkg': vuln['package']['name']}

		vuls = []
		for pkg,vs in pkg_vulns.items():
			vuls.extend([(pkgs[pkg]['name'], pkgs[pkg]['version'], all_vuln[v]['severity'], all_vuln[v]['cve'], 'ubuntu')
				for v in vs])
	
		resdict = {'total': unique_cves(vuls),  
				   'severities': Counter(severity[2] for severity in vuls),
				   'type': Counter(typ[4] for typ in vuls),
				   'vulnerabilities': vuls}
		return resdict



def read_snyk(file):
	""" Parses the JSON report generated by Snyk scanner and returns a dictionary where
	Args:
		file (JSON): the scanning report
	Returns:
		resdict (dict):
			keys:
				total: the total number of CVEs.
				severities: a counter of the different severity levels,  
				type: type of the vulnerable package and can be either an OS package or a Python package
				vulnerabilities: a list of tuples in the form (pkgName, pkgVersion, severity, cveID, type)
	"""
	with open(file) as f:
		data = json.loads(f.read())

		vuls = []
		for vul in data['vulnerabilities']:
			vuls.append((vul['name'].split('/')[-1], 
						vul['version'],  
						vul['severity'], 
						vul['identifiers']['CVE'][0] if len(vul['identifiers']['CVE']) == 1 else vul['identifiers']['CVE'],
						'ubuntu' 
						))
	
		resdict = {'total': unique_cves(vuls), 
				   'severities': Counter(severity[2] for severity in vuls),
				   'type': Counter(typ[4] for typ in vuls),
				   'vulnerabilities': vuls}
		return resdict


def search_vul_pkg(vuls, path):
	""" Searches through the file system specified by `path` to locate 
		the vulnerable packages in the list `vuls` using the command find
		and prints the paths of the vulnerable packages in `vuls` that are
		found in the file system
	Args:
		vuls (list of tuples): tuples in the form (pkgName, pkgVersion, severity, cveID, type)
		path (str): path of the file system 
	"""
	packages = []
	for vul in vuls:
		if vul[0]=='tensorflow-gpu':
			cmd = f'find {path} -iname "*tensorflow*" && find {path} -iname "*{vul[0]}*"'
		else:
			cmd = f'find {path} -iname "*{vul[0]}*"'
		output = sp.getoutput(cmd)
		if output:
			packages.append((vul[0], vul[2], vul[3], vul[4], output.split('\n')))

	print(len(packages), '\n')
	for p in packages:
		print(p[0], p[1], p[2], p[3]) # prints (pkgName, severity, cveID, type)
		for i in p[4]:
			print(i) # print paths
		print('\n')


def detected_cves_by_pkg(vulns, file):
	""" Returns deteced CVEs by package and saves a string for a LaTeX table that lists  
	the results in the file given in the second argument `file`.
	Args: 
		vulns (list of tuples): tuples in the form (pkgName, pkgVersion, severity, cveID, type)
		file (txt file): a file that will contain a string that can be used to create a LaTeX table """
	vuln_dic = {}
	for vuln in vulns:
		if vuln_dic.get((vuln[0],vuln[1])):
			vuln_dic[(vuln[0],vuln[1])].append(vuln[3])
		else:
			vuln_dic[(vuln[0],vuln[1])] = [vuln[3]]
	print('Number of packages:', len(vuln_dic.keys()))
	print('Number of CVEs:', sum(len(set(v)) for v in vuln_dic.values()))
	unique_cve = set()
	for k,v in sorted(vuln_dic.items(), key=lambda kv: len(kv[1]), reverse=True):
		for i in v:
			unique_cve.add(i)
	print('Number of unique CVEs:', len(unique_cve))
	
	with open(file, "w") as f:
		contents = ''.join([
        f"{k[0]} & {k[1]} & {len(set(v))} \\\\ \\hline " 
        for k, v in sorted(vuln_dic.items(), key=lambda kv: len(set(kv[1])), reverse=True)
    ])
		f.write(f"""
\\begin{{longtable}}{{| c | c | c |}}
	\\caption{{No. of vulnerabilities by Package}} \\label{{tab:testtab}} \\\\
		\\hline
		\\textbf{{Package}} & \\textbf{{Version}} & \\textbf{{No. of Vulns}} \\\\
		\\hline\
		{contents}
\\end{{longtable}}
			""".strip())
	return vuln_dic


def demo(file='TF270'):
	""" If the names of the scanning reports from all four scanners are hard coded, 
	for example, in the form of `GRYPE_TF270` for TensorFlow v2.7.0, this function 
	can be used to print the total number of CVEs, the counts of each severity, etc.
	"""
	def print_counts(resdict, scanner):
		print(scanner)
		print('Total:',  resdict['total'])
		print('Severity:', dict(resdict['severities']))
		print('Type:', dict(resdict['type']))
		tf_cves = [cve for cve in resdict['vulnerabilities'] if cve[-1] == 'python']
		print('python-pkg CVEs:',Counter(severity[2] for severity in tf_cves), '\n')
	print_counts(read_grype(globals()['GRYPE_'+file]), 'Grype')
	print_counts(read_trivy(globals()['TRIVY_'+file]), 'Trivy')
	print_counts(read_clair(globals()['CLAIR_'+file]), 'Clair')
	print_counts(read_snyk(globals()['SNYK_'+file]), 'Snyk')


def main():
	""" 
	Takes three arguments: (1) name of scanner, (2) path to the scanning report, (3) path to the file system.
	The fourth optional argument is used to give a path to a file that is passed to `detected_cves_by_pkg()`
	"""
	vulns = None
	if len(sys.argv) > 3:
		scanner = sys.argv[1].lower()
		
		if scanner == 'trivy':
			vulns = read_trivy(sys.argv[2])['vulnerabilities']
		elif scanner == 'grype':
			vulns = read_grype(sys.argv[2])['vulnerabilities']
		elif scanner == 'clair':
			vulns = read_clair(sys.argv[2])['vulnerabilities']
		elif scanner == 'snyk':
			vulns = read_snyk(sys.argv[2])['vulnerabilities']
		if vulns is not None: 
			search_vul_pkg(vulns, sys.argv[3])

	elif len(sys.argv) > 4:
		detected_cves_by_pkg(vulns, sys.argv[4])


if __name__ == "__main__":
	main()